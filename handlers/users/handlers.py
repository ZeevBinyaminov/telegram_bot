import asyncio
import json
import logging
from datetime import datetime, timedelta
from config import OPTIMUM_CHAT_ID

from loader import dp, bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup

from keyboards.inline.choice_buttons import main_menu, social_media_menu, subjects_menu, events_menu, \
    make_events_menu, make_subjects_menu
from keyboards.inline.callback_data import subject_choice_callback, social_media_choice_callback, event_choice_callback

from aiogram.dispatcher import FSMContext
from state import Subject, Event

from db import subjects_dict, social_media_dict, events_dict


@dp.message_handler(commands=["start", "menu"])
async def welcome(message: Message):
    command = message.get_command()
    command_text = {
        '/start': "–ü—Ä–∏–≤–µ—Ç!\n"
                  "–Ø - –±–æ—Ç-–Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –û–ø—Ç–∏–º—É–º—É.\n\n"
                  "ü§ì–£ –Ω–∞—Å –ø—Ä–æ—Ö–æ–¥—è—Ç –∑–∞–Ω—è—Ç–∏—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º"
                  " (–Ω–∞–∂–∏–º–∞–π ¬´–ø—Ä–µ–¥–º–µ—Ç—ã¬ª –∏ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–Ω—è—Ç–∏–π –∏ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ)\n\n"
                  "üöÄ–ï—â—ë –º—ã –ø—Ä–æ–≤–æ–¥–∏–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ –±–ª–∏–∂–∞–π—à–µ–µ, –Ω–∞–∂–∏–º–∞–π ¬´—Å–æ–±—ã—Ç–∏—è¬ª\n\n"
                  "–¢–∞–∫–∂–µ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, "
                  "—á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏ –∏ —á–∏—Ç–∞—Ç—å –Ω–∞—à–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ –ª—é–±–∏–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µüíú",

        '/menu': '–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ?',

    }

    # ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —É—á–µ—Ç –∫–ª–∏–∫–æ–≤
    with open("users.json", "r") as users_file:
        users_dict = json.load(users_file)
        user_id = str(message.from_user.id)
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name

    if user_id not in users_dict:
        users_dict[user_id] = {
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
        }

    with open("users.json", "w") as users_file:
        json.dump(users_dict, users_file, indent=4, ensure_ascii=False)
    # ----

    await message.answer(
        text=command_text[command],
        reply_markup=main_menu
    )


@dp.callback_query_handler(text='social media')
async def choose_social_media(call: CallbackQuery):
    await call.answer(cache_time=1)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.edit_text(text='–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:')
    await call.message.edit_reply_markup(reply_markup=social_media_menu)


@dp.message_handler(commands=['social_media'])
async def get_social_media(message: Message):
    await message.answer(text='–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:', reply_markup=social_media_menu)


@dp.callback_query_handler(text='subjects')
async def choose_subjects(call: CallbackQuery):
    await call.answer(cache_time=2)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:')
    await call.message.edit_reply_markup(reply_markup=subjects_menu)


@dp.message_handler(commands=['subjects'])
async def get_subjects(message: Message):
    await message.answer(text='–ü—Ä–µ–¥–º–µ—Ç—ã: ', reply_markup=subjects_menu)


@dp.callback_query_handler(text="events")
async def choose_events(call: CallbackQuery):
    await call.answer(cache_time=1)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    if events_menu == InlineKeyboardMarkup():
        await call.message.edit_text(text="–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–Ω—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π—é\n"
                                          "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    else:
        await call.message.edit_text(text="–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π")
        await call.message.edit_reply_markup(reply_markup=events_menu)


@dp.message_handler(commands=['events'])
async def get_events(message: Message):
    if events_menu == InlineKeyboardMarkup():
        await message.answer(text="–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π—é\n"
                                  "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /menu, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    else:
        await message.answer(text='–°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π', reply_markup=events_menu)


@dp.callback_query_handler(text='back')
async def back(call: CallbackQuery):
    await call.answer(cache_time=1)
    callback_data = call.data
    logging.info(f"call = {callback_data}")
    await call.message.edit_text(text='–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ?')
    await call.message.edit_reply_markup(reply_markup=main_menu)


@dp.callback_query_handler(subject_choice_callback.filter())
async def choose_subject(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=1)
    logging.info(f"call = {callback_data}")
    subject = callback_data.get('subject_name')
    await call.message.answer(
        text='\n'.join([key.rstrip("_link").title() + ": " + value for key, value in subjects_dict[subject].items()])
    )


@dp.callback_query_handler(social_media_choice_callback.filter())
async def choose_social_media(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=1)
    logging.info(f"call = {callback_data}")
    social_media = callback_data.get('social_media_name')
    social_media_dict[social_media]["clicks"] += 1
    await call.message.answer(
        text=f"–°—Å—ã–ª–∫–∞ –Ω–∞ {social_media}: \n"
             f"{social_media_dict[social_media]['url']}"
    )


@dp.callback_query_handler(event_choice_callback.filter())
async def choose_event(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=1)
    logging.info(f"call = {callback_data}")
    date, time = call.data.split(";")[2:]
    await call.message.answer(text=events_dict[date][time]["event_text"])


# adding new subject
@dp.message_handler(commands=["add_subject"], state=None)
async def add_subject(message: Message):
    if await is_admin(message):
        await Subject.subject_name.set()
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
    else:
        await message.answer(text="–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º")


@dp.message_handler(state=Subject.subject_name)
async def add_subject_name(message: Message, state: FSMContext):
    if message.text in subjects_dict:
        await message.answer(text="–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å!")
        await state.reset_state()
    else:
        async with state.proxy() as data:
            data['subject_name'] = message.text

        await Subject.next()
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–ø–ª–µ–π–ª–∏—Å—Ç")


@dp.message_handler(state=Subject.instagram_link)
async def add_instagram_link(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['instagram_link'] = message.text

    await Subject.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç")


@dp.message_handler(state=Subject.chat_link)
async def add_instagram_link(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['chat_link'] = message.text

    await Subject.next()
    await message.answer("–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ zoom")


@dp.message_handler(state=Subject.zoom_link)
async def add_zoom_link(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['zoom_link'] = message.text

    await add_subject_json(state)
    await state.finish()

    await message.answer(text=f"–ü—Ä–µ–¥–º–µ—Ç \"{data['subject_name']}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")


async def add_subject_json(state: FSMContext):
    async with state.proxy() as data:
        keys = list(data.keys())
        subjects_dict[data[keys[0]]] = {keys[i]: data[keys[i]] for i in range(1, 4)}

    with open("subjects.json", "w") as subjects_file:
        json.dump(subjects_dict, subjects_file, indent=4, ensure_ascii=False)
    global subjects_menu
    subjects_menu = make_subjects_menu()


# ---

# adding new event
@dp.message_handler(commands=['add_event'], state=None)
async def set_event(message: Message):
    if await is_admin(message):
        await Event.event_name.set()
        await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º")


@dp.message_handler(state=Event.event_name)
async def add_event_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_name'] = message.text

    await Event.next()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")


@dp.message_handler(state=Event.event_text)
async def add_event_text(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_text'] = message.text

    await Event.next()
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è. –§–æ—Ä–º–∞—Ç: \"dd.mm.yyyy\""
    )


@dp.message_handler(state=Event.event_date)
async def add_event_date(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_date'] = message.text

    await Event.next()
    await message.answer(
        "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ - –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è. –§–æ—Ä–º–∞—Ç: \"hh:mm\""
    )


@dp.message_handler(state=Event.event_time)
async def add_event_time(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['event_time'] = message.text

    await add_event_json(state)
    await state.finish()
    await message.answer(
        f"–°–æ–±—ã—Ç–∏–µ \"{data['event_name']}\" —Å —Ç–µ–∫—Å—Ç–æ–º:\n \"{data['event_text']}\"\n"
        f"–¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –∑–∞ —Å—É—Ç–∫–∏ –¥–æ {data['event_date']}"
        f" –≤ {data['event_time']}"
    )


async def add_event_json(state: FSMContext):
    global events_menu
    async with state.proxy() as data:
        keys = list(data.keys())
        date = data[keys[2]]
        time = data[keys[3]]
        if date not in events_dict:
            events_dict[date] = {}
        events_dict[date][time] = {keys[i]: data[keys[i]] for i in (0, 1)}
        events_dict[date][time]['active'] = True
    with open("events.json", "w") as events_file:
        json.dump(events_dict, events_file, indent=4, ensure_ascii=False)

    events_menu = make_events_menu()


# ---


# notifier
async def notifier():
    global events_menu
    while True:
        date, time = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y %H:%M").split()

        if events_dict.get(date):
            for event_time in events_dict.get(date):
                if time == event_time and events_dict[date][time]['active']:
                    await bot.send_message(chat_id=OPTIMUM_CHAT_ID,
                                           text=events_dict.get(date).get(event_time).get('event_text'))

                    events_dict[date][time]['active'] = False

                    with open("events.json", "w") as events_file:
                        json.dump(events_dict, events_file, indent=4, ensure_ascii=False)
                    events_menu = make_events_menu()

        await asyncio.sleep(5)


async def is_admin(message: Message):
    user_id = message.from_user.id
    data = await bot.get_chat_administrators(OPTIMUM_CHAT_ID)
    admins_id = [admin["user"]["id"] for admin in data]
    return user_id in admins_id
